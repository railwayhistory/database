### path = "ref/base"
### lang = "en"
### title = "The Structure of Source Files"


   All data is being kept in source files which in turn are stored in a
   repository to retain history. For the web presentation, these source
   files are read and put into a database.

   The source data files are kept in a textual markup format called
   [[http://www.yaml.org/][YAML]]. This format allows to describe structured
   objects similar to JSON or XML but in a more human readable and, more
   importantly, human editable way.

   The basic YAML markup has been extended to allow terse expression of
   constructs that are often used in the project, such as references to
   other objects.

   The following is an introduction to the various structural elements of
   YAML and our own extension. Note that the description for YAML are not
   necessarily completely acurate. If you want the full truth about YAML,
   please refer to the [[http://www.yaml.org/spec/][specification]].


.. YAML Structural Elements

### alias('ref/base/document', 'document')
... {{id document}} Document

   Each YAML file can contain multiple independent documents. Within the
   project, each YAML document describes exactly one object. Thus, each file
   can contain several objects.

   Within a YAML file, documents are separated by three dashes on a line
   by its own.


... Sequence

   A sequence is an ordered collection of other structural elements.  Sequences
   can be given in two forms. The normal form is to start each element on a new
   line with a hyphen and a space:

      Verbatim:
      - first
      - second
      - third

   A compacter  form places all items into square brackets and
   separates them with commas:

      Verbatim:
      [ first, second, third ]

... Mapping

   A mapping is a collection of other structural elements identified by a
   key. While in YAML this key can be of all sorts of data types, MongoDB
   (the database we are using), limits them to strings, so we do that too.

   Mappings can be given in two forms. The normal form starts each element
   on a line of its own with the key followed by a colon:

      Verbatim:
      first: first value
      second: second value
      third: third value

   The compacter form places all items into curly braces and separates them
   with commas:

      Verbatim:
      { first: first value, second: second value, third: third value }


... Scalars

   Normally, you just state any scalar, ie., simple values, as they are and
   YAML figures out the type all by its own. If necessary, you can but the
   scalar into single or double quotes. For instance, if you have a list in
   the simple form, you'd need to put any string with commas into quotes.


... Embedding Elements

   You can put complex elements inside other elements. For instance, you can
   have a list inside a mapping. The elements of that list could be mappings
   again.

   Embedding is normally done through indentation. The above list inside a
   mapping woud be like this:

      Verbatim:
      first:
      	  - second
	  - third


... Multi-line strings

   If strings are becoming too long (we do have a 78 character per line
   limit on our source files), you can break them across lines. You simple
   indent them a bit. 


.. Types of Values: Tags

   Normally, YAML inferes the type from the content. If your value is only
   digits, it correctly returns it as an integer number. However, you can
   also force a certain type. This is called tagging the value and is done
   by simple starting with a type identifier which is subsequently called 
   the tag.

   Tags start with one or two exclamation point. Tags starting with two
   exclamation points come with YAML, those starting with only one are an
   extension by _railwayhistory.org_ for our own source files.

   Below we describe all the types and tags used.


... Tags Defined by YAML

### alias('ref/base/float', 'float')
.... {{id float}} ~!!float~: Floating Point Number

   Any real number given in the usual presentation with a base value
   that includes a decimal dot and an optional exponent.


### alias('ref/base/integer', 'integer')
.... {{id integer}} ~!!int~: Integer

   Any integral number, given in its decimal representation.

   Any values not explicitely tagged that are a sequence of digits
   potentially starting with a ~-~ sign are interpreted as integers.


### alias('ref/base/mapping', 'mapping')
.... {{id mapping}} ~!!map~: Mapping

   A mapping is a collection of elements where each element is identified by
   a unique key. While YAML itself does not limit the type of a key, we do
   and require it to be a [[~ref/base/string]].


### alias('ref/base/null', 'null')
.... {{id null}} ~!!null~: Null

   The null value is no value at all. Depending on the context, we use it
   either to represent an unknown value or the disappearance of a feature.

   The places where null values are allowed are explicitely given in the
   reference.


### alias('ref/base/sequence', 'sequence')
.... {{id sequence}} ~!!seq~: Sequence

   A sequence is an order collections of elements.


### alias('ref/base/string', 'string')
.... {{id string}} ~!!str~: String

   A string is a sequence of characters. YAML uses Unicode and so do we.
   All source files should use UTF-8 as their encoding.


... Private Tags

### alias('ref/base/date', 'date')
.... {{id date}} ~!date~: Date

   An extended date. The date is expressed by what is known as
   the ISO date. You give the year with four digits, followed
   by a hyphen, followed by the number of the month with two
   digits, followed by yet another hyphen and the day of month,
   yet again with two digits. If you don't know the day, you
   can leave it out. If you only know the year, you can leave
   out both month and day. In both cases, you drop unnecessary
   hyphens, too.

   Two extensions to the ISO date are in use: If you prefix it
   with a small c (short for _circa_) to the date, you say that
   this is roughly the date. If you suffix a question mark, this
   means that you are not quite sure.

   The circa c is usually used if the editor doesn't really
   have a clue but guesses that it should have happened around
   that time. So, "1970c" can really mean any date between 1950
   and 2000 but the editor believes that it happened in the
   1960s or 1970s.

   As an illustration, some valid dates

      o  1884-12-01
      o  1884-12
      o  1884
      o  1884-12-01?
      o  c1880

   You can use [[~ref/base/none][!!null]] instead of the date. This
   is used whenever no specific date is known and can
   be used for an event that collects the earliest known state
   of an object.  Eventually, all placeholder dates should be
   changed into more meaningful dates, but keeping them around
   is preferable over assuming some dates when they are not
   very well known.

   For instance, if the oldest source for the name of a station
   opened in 1883 is from 1914, you cannot safely attach that
   name to an event dated 1883 as the station may very well
   have had a different name earlier. Thus you add the name to
   an event with the asterisk date and your source attached to
   it. Then everyone knows that we only have the name from 1914
   confirmed.


### alias('ref/base/keyloc', 'keyloc')
.... {{id keyloc}} ~!keyloc~: Key Location

   This is a shortcut for stating a location on a line by first giving
   the line's key and then the location on the line.

   The location is an arbitrary string. This is necessary since various
   countries use different formats and units.


### alias('ref/base/keyref', 'keyref')
.... {{id keyref}} ~!keyref~: Key Reference

   A reference to another document using the document's key.


### alias('ref/base/voltag', 'voltage')
.... {{id voltage}} ~!voltage~: Voltage of Electrification

   A complex value describing the voltage of an electrification. The
   value starts with a integer followed directly without white-space
   by either ~V~ or ~kV~ stating the voltage. This is followed by
   either ~DC~ for direct current or a frequency for AC given as a float
   directly followed by ~Hz~. Finally, the term ~\~3~ can optionally
   be given to state three-phase AC.
